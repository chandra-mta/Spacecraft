#!/usr/bin/env /proj/sot/ska/bin/python
# -*- coding: utf-8 -*-

#############################################################################################
#                                                                                           #
#                                                                                           #
#               author: t. isobe (tisobe@cfa.harvard.edu)                                   #
#                                                                                           #
#               last update: Feb 13, 2019                                                   #
#                                                                                           #
#############################################################################################

import os
import sys
import re
import string
import random
import operator
import math
#import numpy
import time
import subprocess
#import Chandra.Time
#import unittest
import struct


path = '/data/mta/Script/Dumps/Scripts/house_keeping/dir_list_test'
f    = open(path, 'r')
data = [line.strip() for line in f.readlines()]
f.close()

for ent in data:
    atemp = re.split(':', ent)
    var  = atemp[1].strip()
    line = atemp[0].strip()
    exec "%s = %s" %(var, line)

sys.path.append(bin_dir)
#
#--- temp writing file name
#
rtail    = int(time.time()*random.random())
zspace   = '/tmp/zspace' + str(rtail)

resolution = 300

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

def deahk():

    k = 0
    while True:
        line = sys.stdin.read(8)
        if len(line) == 8:
            #print "I AM HERE LINE: " + str(line) + '<<<<'
            print("I AM HERE: %s" % str(line))
            buf = struct.unpack('<II', line)
            #print "I AM HERE BUF: " + str(buf)
            #if buf[0] != 0x736f4166:
            #    print "bad sync"
            #    exit(1)
        k+=1
        if k > 8:
            exit(1)

#            for k in range(0, 2):
#                [blen, btype] = [bit_op(buf, 32, 10), bit_op(buf, 42, 6)]
#                print "I AM HERE: " + str(blen) + '<-->' + str(btype)
#                ichk = 4*(blen-2)
#                chk = buf[k].stdin.read(ichk)
#                if len(chk) !   ichk:
#                    die " something not right."
#                if type == 62:
#                    a1   = bit_op(buf[k], 96, 32) << 7 a
#                    date = "%9d %03d:%d.%03d%03d"  % (
#
#        else:
#            break


#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

def bit_op(buf, off, blen):

    abit = off & 31
    n    = 0
    bexp = 0
    i    = 0


    if (abit + blen) > 32:
        n = buf[off >>5] >> abit
        if abit:
            n &=  0x7fffffff >> (abit -1)

        bexp  = 32 - abit
        off  += bexp
        blen -= bexp
        abit   = 0

    ###print "I AM HERE BIT: "+ str(i) + '<-->' + str(off) + '<-->' + str(abit)
    i = buf[off >>5] >> abit
    ###print "I AM HERE BIT I AFTER: " + str(i)
    if blen < 32:
        i &= 0x7fffffff >> (31 - blen)
    ###print "I AM HERE BIT I AFTER2: " + str(i)

    n += i << bexp

    return n

        


#-----------------------------------------------------------------------------------------------
#-- read_data_file: read data file                                                            --
#-----------------------------------------------------------------------------------------------

def read_data_file(ifile, remove=0):
    """
    read data file
    input:  ifile   --- data file name
            remove  --- if > 0: remove the file after reading
    output: data
    """

    f    = open(ifile, 'r')
    data = [line.strip() for line in f.readlines()]
    f.close()

    if remove > 0:
        cmd  = 'rm -f ' + ifile
        os.system(cmd)

    return data

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

def rm_file(ifile):

    if os.path.isfile(ifile):
        cmd = 'rm -f ' + ifile

        os.system(cmd)

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

def temp(val):
    t = (val - 2048) * 1.14
    if t <= 10:
        return "Short"

    elif t >= 2040:
        return "Open"

    else:
        u = log((5230 * t) / (2048.0 - t))
        v = -273.16 + 1.0 /(1.4733e-3 + 2.372e-4 * u + 1.074e-7 * u**3)

        return v

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

def fptemp(val):
    t = (val - 2048.0) / 1.255
    v = -246.3 + 0.1863 * t + 1.415e-5 * t**2 - 1.885e-9 * t**3

    return v

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

def dpag (val):

    v = -2.5 + 0.00122 * val

    return v

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

def dpa5(val):

    v = -20.83 + 0.01017 * val

    return v

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

def raw1(val):

    v = -41.90 + 0.02044 * val

    return v

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

def raw2(val):

    v = -20.83 + 0.01017 * val

    return v



#-----------------------------------------------------------------------------------------------

if __name__ == "__main__":

    deahk()

